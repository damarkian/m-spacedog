# Workflow API version
ZapOSApiVersion: v1alpha1

# Declares this as workflow
kind: Workflow

# List resources needed by workflow.
resources:

# A resource named `welcome` that is a public git repo. All the fields here are required except branch, which defaults to master.
- name: m-spacedog
  type: git
  parameters:
    url: "git@github.com:damarkian/m-spacedog.git"
    branch: "master"
- name: OpenFermion
  type: git
  parameters:
    url: "git@github.com:quantumlib/OpenFermion.git"
    branch: "master"
- name: Cirq
  type: git
  parameters:
    url: "git@github.com:quantumlib/Cirq.git"
    branch: "master"
- name: OpenFermion-Cirq 
  type: git
  parameters:    
    url: "git@github.com:quantumlib/OpenFermion-Cirq.git"
    branch: "master"
- name: qe-psi4
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-psi4.git"
    branch: "master"
#url: "git@github.com:quantumlib/OpenFermion-Cirq.git#0.4.0"

# Data to help you easily work with your workflow
metadata:

  # Prefix for workflow ID
  generateName: spacedog-

# Data for running the workflow
spec:

  # Think of this as identifying the `main` function -- this tells the workflow which template to start with
  entrypoint: hello

  # Initializing global variables for use in workflow
  arguments:
    parameters:

    # Where output data is stored -- Must be `quantum-engine` for compatibility with Orquestra data services
    - s3-bucket: quantum-engine
    # Path where output data is stored within the `s3-bucket` -- can be anything you want
    - s3-key: test/cirq

  # The steps of the workflow
  templates:

  # `salutations` is a template that just contains a list of `steps`, which are other templates
  - name: hello
    steps:

    # This template runs the `welcome-to-orquestra` template in the `welcome` resource
    - - name: saludos
        template: spacedog-of
        arguments:
          parameters:
          - resources: [m-spacedog, OpenFermion, Cirq, OpenFermion-Cirq]
          artifacts:

#    # This template runs the `z-transformation` template in the `ztransform` resource
#    - - name: transform-welcome
#        template: z-transformation
#        arguments:
#          parameters:
#          - resources: [ztransform]
#          artifacts:
#          - name: message
#            # This template takes in the output artifact from the `welcome` template. 
#            from: '{{steps.greeting.outputs.artifacts.welcome}}'


